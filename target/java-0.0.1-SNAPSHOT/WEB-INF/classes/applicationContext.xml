<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/jee 
						http://www.springframework.org/schema/jee/spring-jee.xsd
						http://www.springframework.org/schema/util 
						http://www.springframework.org/schema/util/spring-util.xsd">

	<!-- <context:component-scan base-package="javaAPI.java" /> -->
		<context:component-scan base-package="javaAPI.java" />
	
	
	<bean id="httpRequestFactory" class="org.springframework.http.client.HttpComponentsClientHttpRequestFactory"/>
	
	<!-- Using http request factory in order to guarantee reasonable defaults for max connections per route, etc -->
	<bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
		<constructor-arg ref="httpRequestFactory"/>
	</bean>
	
	<import resource="applicationContext-resources.xml" />
	<!-- Note that the archetype uses an in-memory database.  Most live apps will want to switch over to using hibernate.xml -->
	<import resource="applicationContext-hibernate-in-memory.xml" />
	<!--  <import resource="applicationContext-hibernate.xml" />-->
	<import resource="applicationContext-security.xml" />
</beans>
