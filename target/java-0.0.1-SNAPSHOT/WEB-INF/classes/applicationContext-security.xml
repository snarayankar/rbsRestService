<beans xmlns="http://www.springframework.org/schema/beans" 
	   xmlns:security="http://www.springframework.org/schema/security" 
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:p="http://www.springframework.org/schema/p" 
	   xmlns:jee="http://www.springframework.org/schema/jee" 
	   xmlns:util="http://www.springframework.org/schema/util"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
	   		http://www.springframework.org/schema/beans/spring-beans.xsd 
	   		http://www.springframework.org/schema/security 
	   		http://www.springframework.org/schema/security/spring-security.xsd 
	   		http://www.springframework.org/schema/jee 
	   		http://www.springframework.org/schema/jee/spring-jee.xsd 
	   		http://www.springframework.org/schema/util 
	   		http://www.springframework.org/schema/util/spring-util.xsd">

<!-- 
 	 <security:debug/> -->
 	
	<!-- REST Spring Security Configuration --> 
	<security:global-method-security pre-post-annotations="enabled" jsr250-annotations="enabled" secured-annotations="enabled" access-decision-manager-ref="accessDecisionManager"/>
	<security:http entry-point-ref="authenticationEntryPoint" create-session="stateless" use-expressions="true">
		<!-- Allow the OPTIONS method used by CORS requests to bypass security filters -->
		<security:intercept-url pattern="/**" method="OPTIONS" requires-channel="https" access="permitAll"/>
		<!-- Allow anyone to hit the service for health checks -->
		<security:intercept-url pattern="/" requires-channel="any" access="permitAll"/>
		<!-- The following IP addresses allow internal-only access to view the service documentation generated by swagger. 209: aamc outgoing (current), 143 range: aamc outgoing (future), 10. - internal network-->
 		<security:intercept-url pattern="/api-docs/**" requires-channel="any" access="hasIpAddress('143.220.32.0/24') or hasIpAddress('10.0.0.0/8') or hasIpAddress('209.133.66.6')"/> 		
		<security:intercept-url pattern="/**" requires-channel="https" access="isAuthenticated()"/>
		<security:custom-filter position="PRE_AUTH_FILTER" ref="openssoFilter" />
		<security:port-mappings>
			<security:port-mapping http="80" https="443" />
			<security:port-mapping http="9080" https="9443" />
			<security:port-mapping http="9081" https="9443" />
			<security:port-mapping http="8080" https="8443" />
		</security:port-mappings>
	</security:http>
	
	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider
			ref="preauthAuthProvider" />
	</security:authentication-manager>

	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
		<property name="allowIfAllAbstainDecisions" value="true" />
		<property name="decisionVoters">
			<list>
				<bean class="org.springframework.security.access.vote.RoleVoter">
					<!-- Reset the role prefix to "", default is ROLE_ -->
					<property name="rolePrefix" value="" />
				</bean>
				<!--
					The authenticated voter grant access if e.g. IS_AUTHENTICATED_FULLY
					is an attribute
				-->
				<bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
			</list>

		</property>
	</bean>

	<bean id="openssoFilter"
		class="org.aamc.commons.spring.security.opensso.OpenSSOPreAuthenticatedProcessingFilter">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="authenticationDetailsSource" ref="openSSOAuthenticationDetailsSource" />
		<property name="openSSORestOperations" ref="openSSORestOperations" />
	</bean>

	<bean id="openSSOAuthenticationDetailsSource"
		class="org.aamc.commons.spring.security.opensso.OpenSSOAuthenticationDetailsSource">
	</bean>

	<bean id="preauthAuthProvider"
		class="org.springframework.security.web.authentication.preauth.PreAuthenticatedAuthenticationProvider">
		<property name="preAuthenticatedUserDetailsService" ref="restClientUserDetailsService" />
	</bean>
	
	<bean id="restClientUserDetailsService"
		class="org.aamc.commons.service.RestClientUserDetailsService">
		<property name="openSSORestOperations" ref="openSSORestOperations" />
		<property name="aamcServiceUrlPrefix" ref="servicesUrl" />
		<property name="userApplication" ref="userApplication" />
		<property name="restTemplate" ref="restTemplate" />
	</bean>

	<!-- All secured data services return a 401 when accessed without security credentials -->
	<bean id="authenticationEntryPoint" class="org.aamc.commons.spring.security.opensso.HTTP401PreAuthenticatedProcessingFilterEntryPoint"/>
	
	<bean id="logoutHandler"
		class="org.aamc.commons.spring.security.opensso.OpenSSOLogoutHandler">
		<constructor-arg ref="ssoLoginUrl" />
		<constructor-arg value="/home/login/logout" />
	</bean>

	<bean id="openSSORestOperations" class="org.aamc.commons.security.opensso.OpenSSORestOperations">
		<constructor-arg index="0" ref="openSsoUrl" />
		<property name="httpExecutor" ref="httpExecutor" />
	</bean>
	<bean id="userApplication" class="java.lang.String">
		<constructor-arg type="java.lang.String" value="java" />
	</bean>
	
	<bean id="httpExecutor" class="org.aamc.commons.httpclient.HttpExecutorHttpClientImpl" />

</beans>